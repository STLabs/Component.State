/************************************************

        WARNING: HUMAN GENERATED FILE

************************************************/
import State
<$setmerge typeName = <$managedObjectClassName$>$>

<$procedure getTypeForAttribute Attribute$><$if Attribute.userInfo.State.Type$><$Attribute.userInfo.State.Type$><$elseif Attribute.hasScalarAttributeType$><$if Attribute.scalarAttributeType == Int16 || Attribute.scalarAttributeType == Int32 || Attribute.scalarAttributeType == Int64$>Int<$else$><$Attribute.scalarAttributeType$><$endif$><$else$><$Attribute.objectAttributeType$><$endif$><$if Attribute.isOptional$>?<$endif$><$endprocedure$>

extension <$typeName$> {
<$foreach Attribute attributesByName do$><$if Attribute.userInfo.State.ProtocolRequirementType == get$>    public var <$Attribute.name$> : <$call getTypeForAttribute Attribute$> {
        get { // you must return a value here }

    }
<$endif$><$endforeach do$>
<$foreach Relationship relationshipsByName do$><$if Relationship.userInfo.State.ProtocolRequirementType == get$>   public var <$Relationship.name$>: <$if  Relationship.isToMany$>[<$endif$><$if Relationship.userInfo.State.CompositionType == Dictionary$>String : <$endif$><$Relationship.destinationEntity.managedObjectClassName$><$if  Relationship.isToMany$>]<$endif$><$if Relationship.isOptional$>?<$endif$> {
        get { // you must return a value here }
    }
<$endif$><$endforeach do$>
<$foreach Attribute attributesByName do$><$if Attribute.userInfo.State.ProtocolRequirementType == func$>   public func <$Attribute.userInfo.State.Func$> {
        // implement protocol requirement here
    }
<$endif$><$endforeach do$>

    // Extend your entity here.
}

<$procedure coding$>

// MARK: Coding
extension <$typeName$> {


    /// decoding is finished on the receiver
    /// - Parameter decoder: the decoder used for decoding
    ///
    /// - Note: This method is called after decoding takes place.
    /// It provides a way to decode any further data with the decoder
    /// or to do any initialization needed after decoding.
    ///
    func didFinishDecodingWithDecoder(decoder: Decoder) {

    }

    /// encoding will finish on the receiver
    /// - parameter encoder: the encoder used for encoding
    ///
    /// - Discussion: This method is called right before encoding finishes.
    /// It provides a chance to encode any further data with the encoder.
    ///
    func willFinishEncodingWithEncoder(encoder: Encoder) {

    }
}

// MARK: Migration
extension <$typeName$> {

    // implement migration here. See: https://github.com/STLabs/State/blob/feat/swift2.0/Docs/Migration.md
}
<$endprocedure$>


<$if isAbstract || userInfo.State.Protocol == YES$><$next$>
<$else$><$call coding$>