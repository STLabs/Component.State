/************************************************

        WARNING: MACHINE GENERATED FILE

 ************************************************/
import Foundation
import State
<$foreach Attribute noninheritedAttributes do$><$if Attribute.userInfo.State.Import$>import <$Attribute.userInfo.State.Import$>
<$endif$><$endforeach$>

<$set rootTypeName = <$managedObjectClassName$>$>

<$procedure setSuperentityType Entity$><$if Entity.hasSuperentity$><$call setSuperentityType Entity.superentity$><$else$><$set rootTypeName = <$Entity.managedObjectClassName$>$><$endif$><$endprocedure$>

<$if hasSuperentity$><$call setSuperentityType superentity$><$endif$>


<$set transientAttributeCount = 0$><$foreach Attribute noninheritedAttributes do$><$if Attribute.isTransient$><$set transientAttributeCount = transientAttributeCount + 1$><$endif$><$endforeach do$>

<$set functionRequirementCount = 0$><$foreach Attribute attributesByName do$><$if Attribute.userInfo.State.ProtocolRequirementType == func$><$set functionRequirementCount = functionRequirementCount + 1$><$endif$><$endforeach do$>

<$set transientAndFunctionAttributeCount = transientAttributeCount + functionRequirementCount$>

<$set transientRelationshipCount = 0$><$foreach Relationship noninheritedRelationships do$><$if Relationship.isTransient$><$set transientRelationshipCount = transientRelationshipCount + 1$><$endif$><$endforeach do$>

<$procedure getTypeForAttribute Attribute$><$if Attribute.userInfo.State.Type$><$Attribute.userInfo.State.Type$><$elseif Attribute.hasScalarAttributeType$><$if Attribute.scalarAttributeType == Int16 || Attribute.scalarAttributeType == Int32 || Attribute.scalarAttributeType == Int64$>Int<$else$><$Attribute.scalarAttributeType$><$endif$><$else$><$Attribute.objectAttributeType$><$endif$><$if Attribute.isOptional$>?<$endif$><$endprocedure$>

<$procedure writeAttributeDefaultValue Attribute DefaultValue$><$if Attribute.userInfo.State.Type$><$if Attribute.userInfo.State.Type == String$>"<$endif$><$DefaultValue$><$if Attribute.userInfo.State.Type == String$>"<$endif$><$else$><$if Attribute.objectAttributeType == String$>"<$endif$><$DefaultValue$><$if Attribute.objectAttributeType == String$>"<$endif$><$endif$><$endprocedure$>

<$procedure getDefaultExpressionForAttribute Attribute$> <$setlocal default = none$><$if Attribute.userInfo.State.Value$>= <$call writeAttributeDefaultValue Attribute Attribute.userInfo.State.Value$><$elseif Attribute.defaultValue !=$>= <$call writeAttributeDefaultValue Attribute Attribute.defaultValue$><$endif$><$endprocedure$>

<$procedure writeRelationshipDefaultValue Relationship DefaultValue$><$if Relationship.userInfo.State.Type$><$if Relationship.userInfo.State.Type == String$>"<$endif$><$endif$><$DefaultValue$><$if Relationship.userInfo.State.Type$><$if Relationship.userInfo.State.Type == String$>"<$endif$><$endif$><$endprocedure$>

<$procedure getDefaultExpressionForRelationship Relationship$><$if Relationship.userInfo.State.Value$>= <$call writeRelationshipDefaultValue Relationship Relationship.userInfo.State.Value$><$endif$><$endprocedure$>

<$procedure getPropertyDeclarationForAttribute Attribute$><$if Attribute.userInfo.State.Immutable == YES$>public let<$else$>public var<$endif$> <$Attribute.name$><$if  !Attribute.isOptional && (Attribute.userInfo.State.Value || Attribute.defaultValue !=)$><$call getDefaultExpressionForAttribute Attribute$><$else$>: <$call getTypeForAttribute Attribute$><$endif$><$endProcedure$>

<$procedure getPropertyDeclarationForRelationship Relationship$><$if Relationship.userInfo.State.Immutable == YES$>public let<$else$>public var<$endif$> <$Relationship.name$><$if !Relationship.isOptional && Relationship.userInfo.State.Value$> <$call getDefaultExpressionForRelationship Relationship$><$else$>: <$if Relationship.isToMany$>[<$if Relationship.userInfo.State.CompositionType == Dictionary$>String : <$endif$><$endif$><$Relationship.destinationEntity.managedObjectClassName$><$if Relationship.isToMany$>]<$endif$><$if Relationship.isOptional$>?<$endif$><$endif$><$endProcedure$>

<$procedure writeVersionHashExtension$>
extension <$typeName$> {

    /// These are provided from the data model designer
    /// and can be used to determine if the model is
    /// a different version.
    public static func modelVersionHash() -> String {
        return "<$versionHash$>"
    }

    public static func modelVersionHashModifier() -> String? {
        return <$if versionHashModifier$>"<$versionHashModifier$>"<$else$>nil<$endif$>
    }
}<$endprocedure$>

<$procedure writeEncodingVersioningBlock$>
        <$typeName$>.encodeVersionIfNeeded(encoder)
        <$endprocedure$>

<$procedure writeDecodingMigrationBlock$>decoder = <$typeName$>.performMigrationIfNeeded(decoder)<$endprocedure$>

<$procedure Struct$>

<$setmerge typeName = <$managedObjectClassName$>$>
<$setmerge superTypeName = <$if hasSuperentity$><$superentity.managedObjectClassName$><$else$>Model<$endif$>$>

public struct <$typeName$> : <$superTypeName$> {
    <$foreach Attribute attributesByName do$><$if Attribute.userInfo.State.ProtocolRequirementType != func && Attribute.userInfo.State.ProtocolRequirementType != get$><$call getPropertyDeclarationForAttribute Attribute$>
    <$endif$><$endforeach do$><$foreach Relationship relationshipsByName do$><$if Relationship.userInfo.State.ProtocolRequirementType != get$><$call getPropertyDeclarationForRelationship Relationship$><$endif$>
    <$endforeach do$>
}

extension <$typeName$> : Decodable {

    public init?(decoder d: Decoder) {
        var decoder = d
        <$call writeDecodingMigrationBlock$>

<$setlocal hasNonOptionals = 0 $>
<$foreach Attribute attributesByName do$><$if !Attribute.isTransient && Attribute.userInfo.State.ProtocolRequirementType != func && Attribute.userInfo.State.ProtocolRequirementType != get$><$if !Attribute.isOptional$><$setlocal hasNonOptionals = 1$><$endif$><$endif$><$endforeach do$>
<$foreach Relationship relationshipsByName do$><$if !Relationship.isTransient && Relationship.userInfo.State.ProtocolRequirementType != get$><$if !Relationship.isOptional$><$setlocal hasNonOptionals = 1$><$endif$><$endif$><$endforeach do$>

<$if hasNonOptionals == 1$>
        guard
            <$setlocal prop = 0$><$foreach Attribute attributesByName do$><$if !Attribute.isTransient && Attribute.userInfo.State.ProtocolRequirementType != func && Attribute.userInfo.State.ProtocolRequirementType != get$><$if !Attribute.isOptional$><$if prop > 0$>,
            <$endif$><$setlocal prop = prop + 1$>let <$Attribute.name$>: <$call getTypeForAttribute Attribute$> = <$if Attribute.attributeType == 1800$><$Attribute.valueTransformerName$>.reverse(<$endif$>decoder.decode("<$Attribute.name$>")<$if Attribute.attributeType == 1800$>)<$endif$><$endif$><$endif$><$endforeach do$><$foreach Relationship relationshipsByName do$><$if !Relationship.isTransient &&  Relationship.userInfo.State.ProtocolRequirementType != get$><$if !Relationship.isOptional$><$if prop > 0$>,
            <$endif$><$setlocal prop = prop + 1$>let <$Relationship.name$>: <$if  Relationship.isToMany$>[<$endif$><$if Relationship.userInfo.State.CompositionType == Dictionary$>String : <$endif$><$Relationship.destinationEntity.managedObjectClassName$><$if  Relationship.isToMany$>]<$endif$><$if Relationship.isOptional$>?<$endif$> = <$if Relationship.userInfo.State.Transformable$><$Relationship.userInfo.State.Transformable$>.reverse(<$endif$>decoder.decode<$if Relationship.destinationEntity.isAbstract || Relationship.destinationEntity.userInfo.State.Protocol == YES$><$Relationship.destinationEntity.managedObjectClassName$><$else$>Model<$endif$><$if Relationship.isToMany$><$if Relationship.userInfo.State.CompositionType == Dictionary$>Dictionary<$else$>Array<$endif$><$endif$>("<$Relationship.name$>")<$if Relationship.userInfo.State.Transformable$>)<$endif$><$endif$><$endif$><$endforeach do$>
        else { return  nil }
<$endif$>

        <$foreach Attribute attributesByName do$><$if !Attribute.isTransient && Attribute.userInfo.State.ProtocolRequirementType != func && Attribute.userInfo.State.ProtocolRequirementType != get$><$if Attribute.isOptional$>let <$Attribute.name$>: <$call getTypeForAttribute Attribute$> = <$if Attribute.attributeType == 1800$><$Attribute.valueTransformerName$>.reverse(<$endif$>decoder.decode("<$Attribute.name$>")<$if Attribute.attributeType == 1800$>)<$endif$><$endif$>
        <$endif$><$endforeach do$><$foreach Relationship relationshipsByName do$><$if !Relationship.isTransient && Relationship.userInfo.State.ProtocolRequirementType != get$><$if Relationship.isOptional$>let <$Relationship.name$>: <$if  Relationship.isToMany$>[<$endif$><$if Relationship.userInfo.State.CompositionType == Dictionary$>String : <$endif$><$Relationship.destinationEntity.managedObjectClassName$><$if  Relationship.isToMany$>]<$endif$><$if Relationship.isOptional$>?<$endif$> = <$if Relationship.userInfo.State.Transformable$><$Relationship.userInfo.State.Transformable$>.reverse(<$endif$>decoder.decode<$if Relationship.destinationEntity.isAbstract || Relationship.destinationEntity.userInfo.State.Protocol == YES$><$Relationship.destinationEntity.managedObjectClassName$><$else$>Model<$endif$><$if Relationship.isToMany$><$if Relationship.userInfo.State.CompositionType == Dictionary$>Dictionary<$else$>Array<$endif$><$endif$>("<$Relationship.name$>")<$if Relationship.userInfo.State.Transformable$>)<$endif$><$endif$>
        <$endif$><$endforeach do$>

        <$foreach Attribute attributesByName do$><$if !Attribute.isTransient && Attribute.userInfo.State.ProtocolRequirementType != func && Attribute.userInfo.State.ProtocolRequirementType != get$>self.<$Attribute.name$> = <$Attribute.name$>
        <$endif$><$endforeach do$><$foreach Relationship relationshipsByName do$><$if !Relationship.isTransient && Relationship.userInfo.State.ProtocolRequirementType != get$>self.<$Relationship.name$> = <$Relationship.name$>
        <$endif$><$endforeach do$>didFinishDecodingWithDecoder(decoder)
    }
}

extension <$typeName$> : Encodable {

    public func encode(e: Encoder) {
        var encoder = e
        <$foreach Attribute attributesByName do$><$if !Attribute.isTransient && Attribute.userInfo.State.ProtocolRequirementType != func && Attribute.userInfo.State.ProtocolRequirementType != get$>encoder.encode(<$Attribute.name$><$if Attribute.attributeType == 1800$> >>> <$Attribute.valueTransformerName$>.apply<$endif$>, "<$Attribute.name$>")
        <$endif$><$endforeach do$><$foreach Relationship relationshipsByName do$><$if !Relationship.isTransient && Relationship.userInfo.State.ProtocolRequirementType != get$>encoder.encode(<$Relationship.name$><$if Relationship.userInfo.State.Transformable$> >>> <$Relationship.userInfo.State.Transformable$>.apply<$endif$>, "<$Relationship.name$>")
        <$endif$><$endforeach do$>
        <$if hasSuperentity$>encoder.encode("<$typeName$>", "<$rootTypeName$>")<$endif$>
        <$call writeEncodingVersioningBlock$>
        self.willFinishEncodingWithEncoder(encoder)
    }
}

<$call writeVersionHashExtension $>
<$endprocedure$>


<$procedure writeRawValueCaseForAttribute Attribute$><$if Attribute.userInfo.State.Value$> = <$if userInfo.State.Type == String$>"<$endif$><$ Attribute.userInfo.State.Value$><$if userInfo.State.Type == String$>"<$endif$><$endif$><$endprocedure$>

<$procedure writeAssociatedValueCaseForAttribute Attribute$><$if Attribute.userInfo.State.Type$>(<$Attribute.userInfo.State.Type$><$if Attribute.isOptional$>?<$endif$>)<$endif$><$endprocedure$>

<$procedure writeEnumCaseForAttribute Attribute$>case <$Attribute.name.initialCapitalString$> <$if userInfo.State.Type$><$call writeRawValueCaseForAttribute Attribute$><$else$><$call writeAssociatedValueCaseForAttribute Attribute$><$endif$><$endprocedure$>


<$procedure writeRawValueCaseForRelationship Relationship$><$if Relationship.userInfo.State.Value$> = <$if userInfo.State.Type == String$>"<$endif$><$ Relationship.userInfo.State.Value$><$if userInfo.State.Type == String$>"<$endif$><$endif$><$endprocedure$>

<$procedure writeAssociatedValueCaseForRelationship Relationship$><$if Relationship.destinationEntity.managedObjectClassName$>(<$if Relationship.isToMany$>[<$endif$><$Relationship.destinationEntity.managedObjectClassName$><$if Relationship.isToMany$>]<$endif$><$if Relationship.isOptional$>?<$endif$>)<$endif$><$endprocedure$>


<$procedure writeEnumCaseForRelationship Relationship$>case <$Relationship.name.initialCapitalString$> <$if userInfo.State.Type$><$call writeRawValueCaseForRelationship Relationship$><$else$><$call writeAssociatedValueCaseForRelationship Relationship$><$endif$><$endprocedure$>


<$procedure writeAttributeDecodeAssociatedSwitchCaseForEnum Attribute$>if let value: <$Attribute.userInfo.State.Type$><$if Attribute.isOptional$>?<$endif$> = decoder.decode("value")<$if Attribute.attributeType == 1800$> >>> <$Attribute.valueTransformerName$>.reverse<$endif$><$if Attribute.isOptional$> >>> asOptional<$endif$> {
                        self = <$typeName$>.<$Attribute.name.initialCapitalString$>(value)
                    } else { return nil }<$endprocedure$>

<$procedure writeAttributeDecodeBasicSwitchCaseForEnum Attribute$>self = <$typeName$>.<$Attribute.name.initialCapitalString$><$endprocedure$>


<$procedure writeAttributeDecodeSwitchCaseForEnumCase Attribute$>case "<$Attribute.name.initialCapitalString$>":
                   <$if Attribute.userInfo.State.Type$><$call writeAttributeDecodeAssociatedSwitchCaseForEnum Attribute$><$else$><$call writeAttributeDecodeBasicSwitchCaseForEnum Attribute$><$endif$><$endprocedure$>

<$procedure writeRelationshipDecodeAssociatedSwitchCaseForEnum Relationship$>if let value: <$if Relationship.isToMany$>[<$endif$><$Relationship.destinationEntity.managedObjectClassName$><$if Relationship.isToMany$>]<$endif$><$if Relationship.isOptional$>?<$endif$> = decoder.decodeModel<$if Relationship.isToMany$>Array<$endif$>("value") <$if Relationship.isOptional$>>>> asOptional<$endif$>{
                        self = <$typeName$>.<$Relationship.name.initialCapitalString$>(value)
                    } else { return nil }<$endprocedure$>

<$procedure writeRelationshipDecodeBasicSwitchCaseForEnum Relationship$>self = <$typeName$>.<$Relationship.name.initialCapitalString$><$endprocedure$>

<$procedure writeRelationshipDecodeRawSwitchCaseForEnum Relationship$>if let value: <$userInfo.State.Type$> = decoder.decodeModel<$if Relationship.isToMany$>Array<$endif$>("value"),
                        instance = <$typeName$>(rawValue: value) {
                        instance.didFinishDecodingWithDecoder(decoder)
                        self = instance
                    } else { return nil }<$endprocedure$>

<$procedure writeRelationshipDecodeSwitchCaseForEnumCase Relationship$>case "<$Relationship.name.initialCapitalString$>":
                    <$if userInfo.State.Type$><$call writeRelationshipDecodeRawSwitchCaseForEnum Relationship$><$elseif  Relationship.destinationEntity.managedObjectClassName$><$call writeRelationshipDecodeAssociatedSwitchCaseForEnum Relationship$><$else$><$call writeRelationshipDecodeBasicSwitchCaseForEnum Relationship$><$endif$><$endprocedure$>

<$procedure writeAttributeEncodeBasicSwitchCaseForEnum Attribute$>case .<$Attribute.name.initialCapitalString$>:
                encoder.encode("<$Attribute.name.initialCapitalString$>", "<$typeName$>")<$endprocedure$>

<$procedure writeAttributeEncodeAssociatedSwitchCaseForEnum Attribute$>case let .<$Attribute.name.initialCapitalString$>(value):
                encoder.encode("<$Attribute.name.initialCapitalString$>", "<$typeName$>")
                encoder.encode(value<$if Attribute.attributeType == 1800$> >>> <$Attribute.valueTransformerName$>.apply<$endif$>, "value")<$endprocedure$>

<$procedure writeAttributeEncodeSwitchCaseForEnumCase Attribute$><$if Attribute.userInfo.State.Type$><$call writeAttributeEncodeAssociatedSwitchCaseForEnum Attribute$><$else$><$call writeAttributeEncodeBasicSwitchCaseForEnum Attribute$><$endif$><$endprocedure$>

<$procedure writeRelationshipEncodeBasicSwitchCaseForEnum Relationship$>case .<$Relationship.name.initialCapitalString$>:
                encoder.encode("<$Relationship.name.initialCapitalString$>", "<$typeName$>")<$endprocedure$>

<$procedure writeRelationshipEncodeRawSwitchCaseForEnum Relationship$>case let .<$Relationship.name.initialCapitalString$>:
                encoder.encode("<$Relationship.name.initialCapitalString$>", "<$typeName$>")
                encoder.encode(self.rawValue, "value")<$endprocedure$>

<$procedure writeRelationshipEncodeAssociatedSwitchCaseForEnum Relationship$>case let .<$Relationship.name.initialCapitalString$>(value):
                encoder.encode("<$Relationship.name.initialCapitalString$>", "<$typeName$>")
                encoder.encode(value, "value")<$endprocedure$>

<$procedure writeRelationshipEncodeSwitchCaseForEnumCase Relationship$><$if userInfo.State.Type$><$call writeRelationshipEncodeRawSwitchCaseForEnum Relationship$><$elseif Relationship.destinationEntity.managedObjectClassName$><$call writeRelationshipEncodeAssociatedSwitchCaseForEnum Relationship$><$else$><$call writeRelationshipEncodeBasicSwitchCaseForEnum Relationship$><$endif$><$endprocedure$>

<$procedure Enum$>
<$setmerge typeName = <$managedObjectClassName$>$>
public enum <$typeName$> <$if userInfo.State.Type$> : <$userInfo.State.Type$>, Model<$else$> : Model<$endif$> {


    <$foreach Attribute noninheritedAttributes do$><$call writeEnumCaseForAttribute Attribute$>
    <$endforeach do$><$foreach Relationship noninheritedRelationships do$><$call writeEnumCaseForRelationship Relationship$>
    <$endforeach do$>
}

extension <$typeName$>: Decodable {

    public init?(decoder d: Decoder) {
        var decoder = d
        <$call writeDecodingMigrationBlock$>
<$if ! userInfo.State.Type$>
        guard let type: String = decoder.decode("<$typeName$>") else { return nil }
        switch type {
                <$foreach Attribute noninheritedAttributes do$><$call writeAttributeDecodeSwitchCaseForEnumCase Attribute$>
                <$endforeach do$><$foreach Relationship noninheritedRelationships do$><$call writeRelationshipDecodeSwitchCaseForEnumCase Relationship$>
                <$endforeach do$>
                default:
                    return nil
        }
<$else$>        guard let value: <$userInfo.State.Type$> = <$if userInfo.State.Transformable$><$userInfo.State.Transformable$>.reverse(<$endif$>decoder.decode<$if userInfo.State.Model$><$userInfo.State.Model$><$endif$>("value")<$if userInfo.State.Transformable$>)<$endif$> else { return nil }
        self.init(rawValue: value)<$endif$>
    }
}

extension <$typeName$>: Encodable {

    public func encode(e: Encoder) {
        var encoder = e
<$if ! userInfo.State.Type$>
        switch self {
            <$foreach Attribute noninheritedAttributes do$><$call writeAttributeEncodeSwitchCaseForEnumCase Attribute$>
            <$endforeach do$><$foreach Relationship noninheritedRelationships do$><$call writeRelationshipEncodeSwitchCaseForEnumCase Relationship$>
            <$endforeach do$>
        }
<$else$>        encoder.encode(<$if userInfo.State.Transformable$><$userInfo.State.Transformable$>.apply(<$endif$>self.rawValue<$if userInfo.State.Transformable$>)<$endif$>, "value")<$endif$><$call writeEncodingVersioningBlock$>self.willFinishEncodingWithEncoder(encoder)
    }
}

<$call writeVersionHashExtension $>
<$endprocedure$>

<$procedure writeAttributeProtocolFunctionRequirement Attribute$>   <$if Attribute.userInfo.State.Mutating == YES$>mutating <$endif$>func <$Attribute.userInfo.State.Func$><$endprocedure$>


<$procedure writeAttributeProtocolPropertyRequirement Attribute$>   var <$Attribute.name$> : <$call getTypeForAttribute Attribute$> { get <$if Attribute.userInfo.State.ProtocolRequirementType == get$>}<$else$>set }<$endif$><$endprocedure$>

<$procedure writeRelationshipProtocolRequirement Relationship$>   var <$Relationship.name$> : <$if Relationship.isToMany$>[<$if Relationship.userInfo.State.CompositionType == Dictionary$>String : <$endif$><$endif$><$Relationship.destinationEntity.managedObjectClassName$><$if Relationship.isToMany$>]<$endif$><$if Relationship.isOptional$>?<$endif$> { get <$if Relationship.userInfo.State.ProtocolRequirementType == get$>}<$else$>set }<$endif$>
<$endprocedure$>

<$procedure writeCasesForTypes Subtypes$>
    <$foreach Type Subtypes do$><$if Type.isAbstract || Type.userInfo.State.Protocol == YES$><$call writeCasesForTypes Type.subentities$><$else$><$call writeCaseForDecodeType Type$><$endif$><$endforeach do$>
<$endprocedure$>

<$procedure writeCaseForDecodeType Type$>
        case "<$Type.managedObjectClassName$>":
            return <$Type.managedObjectClassName$>.self
<$endprocedure$>

<$procedure Protocol$>
<$setmerge typeName = <$managedObjectClassName$>$>
public protocol <$typeName$><$if hasSuperentity$> : <$superentity.managedObjectClassName$><$else$> : Model<$endif$> <$if userInfo.State.Type$>, <$userInfo.State.Type$><$endif$> {

<$foreach Attribute noninheritedAttributes do$><$if Attribute.userInfo.State.ProtocolRequirementType != func$><$call writeAttributeProtocolPropertyRequirement Attribute$>
<$endif$><$endforeach do$><$foreach Relationship noninheritedRelationships do$><$call writeRelationshipProtocolRequirement Relationship$><$endforeach do$>
<$foreach Attribute noninheritedAttributes do$><$if Attribute.userInfo.State.ProtocolRequirementType == func$><$call writeAttributeProtocolFunctionRequirement Attribute$>
<$endif$><$endforeach do$>


}

// Mark: Decoding

public extension Decoder {

    public func decode<$typeName$>(key: String) -> <$typeName$>? {
        let data = self.extractData()
        let d = data[key] as? [String : AnyObject]
        return d.flatMap(_decode<$typeName$>)
    }

    public func decode<$typeName$>Array(key: String) -> [<$typeName$>]? {
        let data = self.extractData()
        let d = data[key] as? [[String : AnyObject]]
        return d.flatMap { sequence($0.map(_decode<$typeName$>)) }
    }

    public func decode<$typeName$>Dictionary(key: String) -> [String : <$typeName$>]? {
        let data = self.extractData()
        let d = data[key] as? [String : [String : AnyObject]]
        return d.flatMap { sequence($0.map(_decode<$typeName$>)) }
    }

    private func _decode<$typeName$>(data: [String : AnyObject]) -> <$typeName$>? {
        guard let dataTypeKey = data["<$rootTypeName$>"] as? String else { return nil }
        if let t = <$typeName$>TypeForKey(dataTypeKey) {
            return t.init(decoder: Decoder(data: data))
        }
        return nil
    }

    private func <$typeName$>TypeForKey(key: String) -> <$typeName$>.Type? {
        switch key {
<$call writeCasesForTypes subentities$>
        default:
            return nil
        }
    }
}

// Mark: Encoding

public extension Encoder {

    public func encode(element: <$typeName$>?, _ key: String) {
        element.apply { self.data[key] = $0.encode() }
    }

    public func encode(element: [<$typeName$>]?, _ key: String) {
        element.apply { self.data[key] = $0.map { $0.encode() } }
    }

    public func encode(element: [String : <$typeName$>]?, _ key: String) {
        element.apply { self.data[key] = $0.map { $0.encode() } }
    }
}


<$endprocedure$>

<$if userInfo.State.Enum == YES$><$call Enum$><$elseif isAbstract || userInfo.State.Protocol == YES$><$call Protocol$><$else$><$call Struct$>
